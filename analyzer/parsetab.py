
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA ID IGNORECHARACTERS LSQUREBUCKET NEGATION PLUS QUESTIONMARK RSQUREBUCKET TEXT\n\tRULE : RULENAME COLON RULENODES\n\t\t | RULENAME COLON PARAM RULENODES\n\t\t | RULENAME COLON RULENODES IGNORECHARACTERS\n\t\t | RULENAME COLON PARAM RULENODES IGNORECHARACTERS\n\t\n\tRULENAME : ID\n\t\t\t | ID PARAM\n\t PARAM : LSQUREBUCKET PARAMIDS RSQUREBUCKET \n\tPARAMIDS : PARAMID\n\t\t\t | PARAMIDS COMMA PARAMID\n\t\n\tPARAMID : ID\n\t\t\t| PLUS ID\n\t\t\t| NEGATION ID\n\t\t\t| QUESTIONMARK ID\n\t\n\tRULENODES : RULENODE\n\t\t\t  | RULENODES RULENODE\n\t\n\tRULENODE : TEXTNODE\n\t\t\t | NAMENONE\n\t\n\tTEXTNODE : TEXT\n\t\t\t | TEXT QUESTIONMARK\n\t\n\tNAMENONE : RULENAME\n\t\t\t | RULENAME QUESTIONMARK\n\t'
    
_lr_action_items = {'ID':([0,3,4,5,6,7,8,9,10,11,12,13,17,18,19,20,22,23,24,25,26,],[3,-5,3,-6,16,-20,3,3,-14,-16,-17,-18,27,28,29,-21,-15,3,-19,-7,16,]),'$end':([1,3,5,7,8,10,11,12,13,20,21,22,23,24,25,30,],[0,-5,-6,-20,-1,-14,-16,-17,-18,-21,-3,-15,-2,-19,-7,-4,]),'COLON':([2,3,5,25,],[4,-5,-6,-7,]),'QUESTIONMARK':([3,5,6,7,13,25,26,],[-5,-6,19,20,24,-7,19,]),'IGNORECHARACTERS':([3,5,7,8,10,11,12,13,20,22,23,24,25,],[-5,-6,-20,21,-14,-16,-17,-18,-21,-15,30,-19,-7,]),'TEXT':([3,4,5,7,8,9,10,11,12,13,20,22,23,24,25,],[-5,13,-6,-20,13,13,-14,-16,-17,-18,-21,-15,13,-19,-7,]),'LSQUREBUCKET':([3,4,],[6,6,]),'PLUS':([6,26,],[17,17,]),'NEGATION':([6,26,],[18,18,]),'RSQUREBUCKET':([14,15,16,27,28,29,31,],[25,-8,-10,-11,-12,-13,-9,]),'COMMA':([14,15,16,27,28,29,31,],[26,-8,-10,-11,-12,-13,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'RULE':([0,],[1,]),'RULENAME':([0,4,8,9,23,],[2,7,7,7,7,]),'PARAM':([3,4,],[5,9,]),'RULENODES':([4,9,],[8,23,]),'RULENODE':([4,8,9,23,],[10,22,10,22,]),'TEXTNODE':([4,8,9,23,],[11,11,11,11,]),'NAMENONE':([4,8,9,23,],[12,12,12,12,]),'PARAMIDS':([6,],[14,]),'PARAMID':([6,26,],[15,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> RULE","S'",1,None,None,None),
  ('RULE -> RULENAME COLON RULENODES','RULE',3,'p_rule','ecma_grammer_parser.py',57),
  ('RULE -> RULENAME COLON PARAM RULENODES','RULE',4,'p_rule','ecma_grammer_parser.py',58),
  ('RULE -> RULENAME COLON RULENODES IGNORECHARACTERS','RULE',4,'p_rule','ecma_grammer_parser.py',59),
  ('RULE -> RULENAME COLON PARAM RULENODES IGNORECHARACTERS','RULE',5,'p_rule','ecma_grammer_parser.py',60),
  ('RULENAME -> ID','RULENAME',1,'p_name','ecma_grammer_parser.py',84),
  ('RULENAME -> ID PARAM','RULENAME',2,'p_name','ecma_grammer_parser.py',85),
  ('PARAM -> LSQUREBUCKET PARAMIDS RSQUREBUCKET','PARAM',3,'p_param','ecma_grammer_parser.py',95),
  ('PARAMIDS -> PARAMID','PARAMIDS',1,'p_paramids','ecma_grammer_parser.py',100),
  ('PARAMIDS -> PARAMIDS COMMA PARAMID','PARAMIDS',3,'p_paramids','ecma_grammer_parser.py',101),
  ('PARAMID -> ID','PARAMID',1,'p_paramid','ecma_grammer_parser.py',113),
  ('PARAMID -> PLUS ID','PARAMID',2,'p_paramid','ecma_grammer_parser.py',114),
  ('PARAMID -> NEGATION ID','PARAMID',2,'p_paramid','ecma_grammer_parser.py',115),
  ('PARAMID -> QUESTIONMARK ID','PARAMID',2,'p_paramid','ecma_grammer_parser.py',116),
  ('RULENODES -> RULENODE','RULENODES',1,'p_rulenodes','ecma_grammer_parser.py',128),
  ('RULENODES -> RULENODES RULENODE','RULENODES',2,'p_rulenodes','ecma_grammer_parser.py',129),
  ('RULENODE -> TEXTNODE','RULENODE',1,'p_rulenode','ecma_grammer_parser.py',141),
  ('RULENODE -> NAMENONE','RULENODE',1,'p_rulenode','ecma_grammer_parser.py',142),
  ('TEXTNODE -> TEXT','TEXTNODE',1,'p_textnode','ecma_grammer_parser.py',148),
  ('TEXTNODE -> TEXT QUESTIONMARK','TEXTNODE',2,'p_textnode','ecma_grammer_parser.py',149),
  ('NAMENONE -> RULENAME','NAMENONE',1,'p_namenode','ecma_grammer_parser.py',163),
  ('NAMENONE -> RULENAME QUESTIONMARK','NAMENONE',2,'p_namenode','ecma_grammer_parser.py',164),
]
