
          uri :::
            uriCharacters?

          uriCharacters :::
            uriCharacter uriCharacters?

          uriCharacter :::
            uriReserved
            uriUnescaped
            uriEscaped

          uriReserved ::: one of
            `;` `/` `?` `:` `@` `&` `=` `+` `$` `,`

          uriUnescaped :::
            uriAlpha
            DecimalDigit
            uriMark

          uriEscaped :::
            `%` HexDigit HexDigit

          uriAlpha ::: one of
            `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`
            `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`

          uriMark ::: one of
            `-` `_` `.` `!` `~` `*` `'` `(` `)`
        

        Pattern[U, N] ::
          Disjunction[?U, ?N]

        Disjunction[U, N] ::
          Alternative[?U, ?N]
          Alternative[?U, ?N] `|` Disjunction[?U, ?N]

        Alternative[U, N] ::
          [empty]
          Alternative[?U, ?N] Term[?U, ?N]

        Term[U, N] ::
          Assertion[?U, ?N]
          Atom[?U, ?N]
          Atom[?U, ?N] Quantifier

        Assertion[U, N] ::
          `^`
          `$`
          `\` `b`
          `\` `B`
          `(` `?` `=` Disjunction[?U, ?N] `)`
          `(` `?` `!` Disjunction[?U, ?N] `)`
          `(` `?` `<=` Disjunction[?U, ?N] `)`
          `(` `?` `<!` Disjunction[?U, ?N] `)`

        Quantifier ::
          QuantifierPrefix
          QuantifierPrefix `?`

        QuantifierPrefix ::
          `*`
          `+`
          `?`
          `{` DecimalDigits `}`
          `{` DecimalDigits `,` `}`
          `{` DecimalDigits `,` DecimalDigits `}`

        Atom[U, N] ::
          PatternCharacter
          `.`
          `\` AtomEscape[?U, ?N]
          CharacterClass[?U]
          `(` GroupSpecifier[?U] Disjunction[?U, ?N] `)`
          `(` `?` `:` Disjunction[?U, ?N] `)`

        SyntaxCharacter :: one of
          `^` `$` `\` `.` `*` `+` `?` `(` `)` `[` `]` `{` `}` `|`

        PatternCharacter ::
          SourceCharacter but not SyntaxCharacter

        AtomEscape[U, N] ::
          DecimalEscape
          CharacterClassEscape[?U]
          CharacterEscape[?U]
          [+N] `k` GroupName[?U]

        CharacterEscape[U] ::
          ControlEscape
          `c` ControlLetter
          `0` [lookahead <! DecimalDigit]
          HexEscapeSequence
          RegExpUnicodeEscapeSequence[?U]
          IdentityEscape[?U]

        ControlEscape :: one of
          `f` `n` `r` `t` `v`

        ControlLetter :: one of
          `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`
          `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`

        GroupSpecifier[U] ::
          [empty]
          `?` GroupName[?U]

        GroupName[U] ::
          `<` RegExpIdentifierName[?U] `>`

        RegExpIdentifierName[U] ::
          RegExpIdentifierStart[?U]
          RegExpIdentifierName[?U] RegExpIdentifierPart[?U]

        RegExpIdentifierStart[U] ::
          UnicodeIDStart
          `$`
          `_`
          `\` RegExpUnicodeEscapeSequence[?U]

        RegExpIdentifierPart[U] ::
          UnicodeIDContinue
          `$`
          `\` RegExpUnicodeEscapeSequence[?U]
          <ZWNJ>
          <ZWJ>

        RegExpUnicodeEscapeSequence[U] ::
          [+U] `u` LeadSurrogate `\u` TrailSurrogate
          [+U] `u` LeadSurrogate
          [+U] `u` TrailSurrogate
          [+U] `u` NonSurrogate
          [~U] `u` Hex4Digits
          [+U] `u{` CodePoint `}`
      

        LeadSurrogate ::
          Hex4Digits [> but only if the SV of |Hex4Digits| is in the inclusive range 0xD800 to 0xDBFF]

        TrailSurrogate ::
          Hex4Digits [> but only if the SV of |Hex4Digits| is in the inclusive range 0xDC00 to 0xDFFF]

        NonSurrogate ::
          Hex4Digits [> but only if the SV of |Hex4Digits| is not in the inclusive range 0xD800 to 0xDFFF]

        IdentityEscape[U] ::
          [+U] SyntaxCharacter
          [+U] `/`
          [~U] SourceCharacter but not UnicodeIDContinue

        DecimalEscape ::
          NonZeroDigit DecimalDigits? [lookahead <! DecimalDigit]

        CharacterClassEscape[U] ::
          `d`
          `D`
          `s`
          `S`
          `w`
          `W`
          [+U] `p{` UnicodePropertyValueExpression `}`
          [+U] `P{` UnicodePropertyValueExpression `}`

        UnicodePropertyValueExpression ::
          UnicodePropertyName `=` UnicodePropertyValue
          LoneUnicodePropertyNameOrValue

        UnicodePropertyName ::
          UnicodePropertyNameCharacters

        UnicodePropertyNameCharacters ::
          UnicodePropertyNameCharacter UnicodePropertyNameCharacters?

        UnicodePropertyValue ::
          UnicodePropertyValueCharacters

        LoneUnicodePropertyNameOrValue ::
          UnicodePropertyValueCharacters

        UnicodePropertyValueCharacters ::
          UnicodePropertyValueCharacter UnicodePropertyValueCharacters?

        UnicodePropertyValueCharacter ::
          UnicodePropertyNameCharacter
          `0`
          `1`
          `2`
          `3`
          `4`
          `5`
          `6`
          `7`
          `8`
          `9`

        UnicodePropertyNameCharacter ::
          ControlLetter
          `_`

        CharacterClass[U] ::
          `[` [lookahead <! {`^`}] ClassRanges[?U] `]`
          `[` `^` ClassRanges[?U] `]`

        ClassRanges[U] ::
          [empty]
          NonemptyClassRanges[?U]

        NonemptyClassRanges[U] ::
          ClassAtom[?U]
          ClassAtom[?U] NonemptyClassRangesNoDash[?U]
          ClassAtom[?U] `-` ClassAtom[?U] ClassRanges[?U]

        NonemptyClassRangesNoDash[U] ::
          ClassAtom[?U]
          ClassAtomNoDash[?U] NonemptyClassRangesNoDash[?U]
          ClassAtomNoDash[?U] `-` ClassAtom[?U] ClassRanges[?U]

        ClassAtom[U] ::
          `-`
          ClassAtomNoDash[?U]

        ClassAtomNoDash[U] ::
          SourceCharacter but not one of `\` or `]` or `-`
          `\` ClassEscape[?U]

        ClassEscape[U] ::
          `b`
          [+U] `-`
          CharacterClassEscape[?U]
          CharacterEscape[?U]
      

        NumericLiteral ::
          DecimalLiteral
          BinaryIntegerLiteral
          OctalIntegerLiteral
          HexIntegerLiteral
          LegacyOctalIntegerLiteral

        LegacyOctalIntegerLiteral ::
          `0` OctalDigit
          LegacyOctalIntegerLiteral OctalDigit

        DecimalIntegerLiteral ::
          `0`
          NonZeroDigit DecimalDigits?
          NonOctalDecimalIntegerLiteral

        NonOctalDecimalIntegerLiteral ::
          `0` NonOctalDigit
          LegacyOctalLikeDecimalIntegerLiteral NonOctalDigit
          NonOctalDecimalIntegerLiteral DecimalDigit

        LegacyOctalLikeDecimalIntegerLiteral ::
          `0` OctalDigit
          LegacyOctalLikeDecimalIntegerLiteral OctalDigit

        NonOctalDigit :: one of
          `8` `9`
      

        EscapeSequence ::
          CharacterEscapeSequence
          LegacyOctalEscapeSequence
          HexEscapeSequence
          UnicodeEscapeSequence

        LegacyOctalEscapeSequence ::
          OctalDigit [lookahead <! OctalDigit]
          ZeroToThree OctalDigit [lookahead <! OctalDigit]
          FourToSeven OctalDigit
          ZeroToThree OctalDigit OctalDigit

        ZeroToThree :: one of
          `0` `1` `2` `3`

        FourToSeven :: one of
          `4` `5` `6` `7`
      

        Comment ::
          MultiLineComment
          SingleLineComment
          SingleLineHTMLOpenComment
          SingleLineHTMLCloseComment
          SingleLineDelimitedComment

        MultiLineComment ::
          `/*` FirstCommentLine? LineTerminator MultiLineCommentChars? `*/` HTMLCloseComment?

        FirstCommentLine ::
          SingleLineDelimitedCommentChars

        SingleLineHTMLOpenComment ::
          `<!--` SingleLineCommentChars?

        SingleLineHTMLCloseComment ::
          LineTerminatorSequence HTMLCloseComment

        SingleLineDelimitedComment ::
          `/*` SingleLineDelimitedCommentChars? `*/`

        HTMLCloseComment ::
          WhiteSpaceSequence? SingleLineDelimitedCommentSequence? `-->` SingleLineCommentChars?

        SingleLineDelimitedCommentChars ::
          SingleLineNotAsteriskChar SingleLineDelimitedCommentChars?
          `*` SingleLinePostAsteriskCommentChars?

        SingleLineNotAsteriskChar ::
          SourceCharacter but not one of `*` or LineTerminator

        SingleLinePostAsteriskCommentChars ::
          SingleLineNotForwardSlashOrAsteriskChar SingleLineDelimitedCommentChars?
          `*` SingleLinePostAsteriskCommentChars?

        SingleLineNotForwardSlashOrAsteriskChar ::
          SourceCharacter but not one of `/` or `*` or LineTerminator

        WhiteSpaceSequence ::
          WhiteSpace WhiteSpaceSequence?

        SingleLineDelimitedCommentSequence ::
          SingleLineDelimitedComment WhiteSpaceSequence? SingleLineDelimitedCommentSequence?
      

        Term[U, N] ::
          [+U] Assertion[+U, ?N]
          [+U] Atom[+U, ?N]
          [+U] Atom[+U, ?N] Quantifier
          [~U] QuantifiableAssertion[?N] Quantifier
          [~U] Assertion[~U, ?N]
          [~U] ExtendedAtom[?N] Quantifier
          [~U] ExtendedAtom[?N]

        Assertion[U, N] ::
          `^`
          `$`
          `\` `b`
          `\` `B`
          [+U] `(` `?` `=` Disjunction[+U, ?N] `)`
          [+U] `(` `?` `!` Disjunction[+U, ?N] `)`
          [~U] QuantifiableAssertion[?N]
          `(` `?` `<=` Disjunction[?U, ?N] `)`
          `(` `?` `<!` Disjunction[?U, ?N] `)`

        QuantifiableAssertion[N] ::
          `(` `?` `=` Disjunction[~U, ?N] `)`
          `(` `?` `!` Disjunction[~U, ?N] `)`

        ExtendedAtom[N] ::
          `.`
          `\` AtomEscape[~U, ?N]
          `\` [lookahead == `c`]
          CharacterClass[~U]
          `(` Disjunction[~U, ?N] `)`
          `(` `?` `:` Disjunction[~U, ?N] `)`
          InvalidBracedQuantifier
          ExtendedPatternCharacter

        InvalidBracedQuantifier ::
          `{` DecimalDigits `}`
          `{` DecimalDigits `,` `}`
          `{` DecimalDigits `,` DecimalDigits `}`

        ExtendedPatternCharacter ::
          SourceCharacter but not one of `^` `$` `\` `.` `*` `+` `?` `(` `)` `[` `|`

        AtomEscape[U, N] ::
          [+U] DecimalEscape
          [~U] DecimalEscape [> but only if the CapturingGroupNumber of |DecimalEscape| is <= _NcapturingParens_]
          CharacterClassEscape[?U]
          CharacterEscape[~U, ?N]
          [+N] `k` GroupName[?U]

        CharacterEscape[U, N] ::
          ControlEscape
          `c` ControlLetter
          `0` [lookahead <! DecimalDigit]
          HexEscapeSequence
          RegExpUnicodeEscapeSequence[?U]
          [~U] LegacyOctalEscapeSequence
          IdentityEscape[?U, ?N]

        IdentityEscape[U, N] ::
          [+U] SyntaxCharacter
          [+U] `/`
          [~U] SourceCharacterIdentityEscape[?N]

        SourceCharacterIdentityEscape[N] ::
          [~N] SourceCharacter but not `c`
          [+N] SourceCharacter but not one of `c` or `k`

        ClassAtomNoDash[U, N] ::
          SourceCharacter but not one of `\` or `]` or `-`
          `\` ClassEscape[?U, ?N]
          `\` [lookahead == `c`]

        ClassEscape[U, N] ::
          `b`
          [+U] `-`
          [~U] `c` ClassControlLetter
          CharacterClassEscape[?U]
          CharacterEscape[?U, ?N]

        ClassControlLetter ::
          DecimalDigit
          `_`
      

        IfStatement[Yield, Await, Return] :
          `if` `(` Expression[+In, ?Yield, ?Await] `)` FunctionDeclaration[?Yield, ?Await, ~Default] `else` Statement[?Yield, ?Await, ?Return]
          `if` `(` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return] `else` FunctionDeclaration[?Yield, ?Await, ~Default]
          `if` `(` Expression[+In, ?Yield, ?Await] `)` FunctionDeclaration[?Yield, ?Await, ~Default] `else` FunctionDeclaration[?Yield, ?Await, ~Default]
          `if` `(` Expression[+In, ?Yield, ?Await] `)` FunctionDeclaration[?Yield, ?Await, ~Default]
      

        IterationStatement[Yield, Await, Return] :
          `for` `(` `var` BindingIdentifier[?Yield, ?Await] Initializer[~In, ?Yield, ?Await] `in` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
     